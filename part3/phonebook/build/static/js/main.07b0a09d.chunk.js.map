{"version":3,"sources":["services/persons.js","components/Person.js","components/Notification.js","components/ErrorNotification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Person","person","deletePerson","name","number","onClick","Notification","message","className","Filter","filterName","setNameFilter","value","onChange","event","target","PersonForm","newName","setNewName","newNumber","setNewNumber","setPersons","persons","setSuccessMessage","onSubmit","preventDefault","personObject","some","matchedperson","find","changedperson","window","confirm","personService","returnedBook","map","setTimeout","concat","type","App","useState","successMessage","errorMessage","setErrorMessage","useEffect","initialBook","booktoShow","toLowerCase","match","filter","ErrorNotification","key","catch","error","n","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07b0a09d.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data) \r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\nconst del = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\nexport default { getAll, create, update, del }","import React from 'react'\r\n\r\nconst Person = ({person, deletePerson}) => {\r\n  return(\r\n    <div>\r\n        {person.name} {person.number} <button onClick={deletePerson}>Delete</button>\r\n    </div>\r\n  ) \r\n}\r\nexport default Person","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"success\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Person from './components/Person'\nimport Notification from './components/Notification'\nimport ErrorNotification from './components/ErrorNotification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ filterName, setNameFilter ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialBook => {\n        setPersons(initialBook)\n      })\n  },[])\n\n  const deletePersonOf = (id, name) => {\n    if (window.confirm(`Detele ${name}`)) {\n      personService\n      .del(id)\n      .then(returnedBook => {\n        setPersons(persons.filter(person => person.id !== id))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `${name} has already been removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        },5000)\n        setPersons(persons.filter(n => n.id !== id))\n      })\n    } \n  }\n  const booktoShow = persons.some(person => person.name.toLowerCase().match(filterName.toLowerCase())) ?\n    persons.filter(person => person.name.toLowerCase().match(filterName.toLowerCase()))\n    : persons\n\n  const rows = () => booktoShow.map(person =>\n    <Person \n      key={person.id} person={person} deletePerson={() => deletePersonOf(person.id, person.name)}/>\n    )\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={successMessage}/>\n      <ErrorNotification message={errorMessage}/>\n      <Filter filterName={filterName} setNameFilter={setNameFilter}/>\n      <h2>Add a new</h2>\n      <PersonForm persons={persons} setPersons={setPersons} newName={newName} setNewName={setNewName} \n      newNumber={newNumber} setNewNumber={setNewNumber} setSuccessMessage={setSuccessMessage} successMessage={successMessage}/>\n      <h2>Numbers</h2>\n      {rows()}\n    </div>\n  )\n}\nconst Filter = ({filterName, setNameFilter}) => {\n  const handleNameFilter = (event) => setNameFilter(event.target.value)\n  return(\n    <div>\n        Filter shown with <input value={filterName} onChange={handleNameFilter} />\n    </div>\n  )  \n}\n\nconst PersonForm = ({newName, setNewName, newNumber, setNewNumber, setPersons, persons, setSuccessMessage}) => {\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n\n  const addName = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    if (persons.some(person => person.name === newName)){\n      const matchedperson = persons.find(person => person.name === newName)\n      const changedperson = {...matchedperson, number: newNumber}\n      if (window.confirm(`${matchedperson.name} is already added to phone book, replace the old number with new one?`)){\n        personService\n          .update(matchedperson.id, changedperson)\n          .then(returnedBook => {\n            setPersons(persons.map(person => person.id !== matchedperson.id ? person : returnedBook))\n            setSuccessMessage(\n              `${matchedperson.name} updated number`\n            )\n            setTimeout(() => {\n              setSuccessMessage(null)\n            }, 5000)\n          })\n      }\n    } else {\n      personService\n      .create(personObject)\n      .then(returnedBook => {\n        setPersons(persons.concat(returnedBook))\n        setSuccessMessage(\n          `Added ${newName}`\n        )\n        setTimeout(() =>{\n          setSuccessMessage(null)\n        },5000)\n      })\n\n    }\n\n    setNewName('') \n    setNewNumber('')\n  }\n  \n  return(\n    <form onSubmit={addName}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}